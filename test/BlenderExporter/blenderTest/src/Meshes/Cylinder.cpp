#include <blenderTest/Meshes/Cylinder.hpp>
#include <Blob/Materials.hpp>
namespace blenderTest::Meshes {
struct Data {
    float x;
    float y;
    float z;
    float nx;
    float ny;
    float nz;
    float uv0x;
    float uv0y;
};
const Data data[48]{
{-1.0, 1.1924881e-08, -1.0, -0.92387956, -0.38268352, 0.0, 0.25, 0.5},
{-1.0, 1.1924881e-08, -1.0, -0.9238795, 0.38268334, 0.0, 0.25, 0.5},
{-1.0, 1.1924881e-08, 1.0, -0.92387956, -0.38268352, 0.0, 0.25, 1.0},
{-1.0, 1.1924881e-08, 1.0, -0.9238795, 0.38268334, 0.0, 0.25, 1.0},
{-0.7071069, 0.70710665, -1.0, -0.9238795, 0.38268334, 0.0, 0.125, 0.5},
{-0.7071069, 0.70710665, -1.0, -0.38268352, 0.92387944, 0.0, 0.125, 0.5},
{-0.7071069, 0.70710665, 1.0, -0.9238795, 0.38268334, 0.0, 0.125, 1.0},
{-0.7071069, 0.70710665, 1.0, -0.38268352, 0.92387944, 0.0, 0.125, 1.0},
{-0.7071067, -0.7071068, -1.0, -0.92387956, -0.38268352, 0.0, 0.375, 0.5},
{-0.7071067, -0.7071068, -1.0, -0.38268343, -0.9238795, 0.0, 0.375, 0.5},
{-0.7071067, -0.7071068, 1.0, -0.92387956, -0.38268352, 0.0, 0.375, 1.0},
{-0.7071067, -0.7071068, 1.0, -0.38268343, -0.9238795, 0.0, 0.375, 1.0},
{-8.742278e-08, -1.0, -1.0, -0.38268343, -0.9238795, 0.0, 0.5, 0.5},
{-8.742278e-08, -1.0, -1.0, 0.38268343, -0.92387956, 0.0, 0.5, 0.5},
{-8.742278e-08, -1.0, 1.0, -0.38268343, -0.9238795, 0.0, 0.5, 1.0},
{-8.742278e-08, -1.0, 1.0, 0.38268343, -0.92387956, 0.0, 0.5, 1.0},
{0.0, 1.0, -1.0, -0.38268352, 0.92387944, 0.0, 0.0, 0.5},
{0.0, 1.0, -1.0, 0.38268346, 0.92387956, 0.0, 1.0, 0.5},
{0.0, 1.0, 1.0, -0.38268352, 0.92387944, 0.0, 0.0, 1.0},
{0.0, 1.0, 1.0, 0.38268346, 0.92387956, 0.0, 1.0, 1.0},
{0.70710677, -0.70710677, -1.0, 0.38268343, -0.92387956, 0.0, 0.625, 0.5},
{0.70710677, -0.70710677, -1.0, 0.92387956, -0.3826835, 0.0, 0.625, 0.5},
{0.70710677, -0.70710677, 1.0, 0.38268343, -0.92387956, 0.0, 0.625, 1.0},
{0.70710677, -0.70710677, 1.0, 0.92387956, -0.3826835, 0.0, 0.625, 1.0},
{0.70710677, 0.70710677, -1.0, 0.38268346, 0.92387956, 0.0, 0.875, 0.5},
{0.70710677, 0.70710677, -1.0, 0.92387956, 0.38268343, 0.0, 0.875, 0.5},
{0.70710677, 0.70710677, 1.0, 0.38268346, 0.92387956, 0.0, 0.875, 1.0},
{0.70710677, 0.70710677, 1.0, 0.92387956, 0.38268343, 0.0, 0.875, 1.0},
{1.0, -4.371139e-08, -1.0, 0.92387956, -0.3826835, 0.0, 0.75, 0.5},
{1.0, -4.371139e-08, -1.0, 0.92387956, 0.38268343, 0.0, 0.75, 0.5},
{1.0, -4.371139e-08, 1.0, 0.92387956, -0.3826835, 0.0, 0.75, 1.0},
{1.0, -4.371139e-08, 1.0, 0.92387956, 0.38268343, 0.0, 0.75, 1.0},
{-1.0, 1.1924881e-08, -1.0, 2.1073422e-08, 0.0, -0.99999994, 0.51, 0.25},
{-1.0, 1.1924881e-08, 1.0, 2.1073424e-08, 0.0, 0.99999994, 0.010000005, 0.25},
{-0.7071069, 0.70710665, -1.0, 2.1073422e-08, 0.0, -0.99999994, 0.5802944, 0.4197056},
{-0.7071069, 0.70710665, 1.0, 2.1073424e-08, 0.0, 0.99999994, 0.080294356, 0.4197056},
{-0.7071067, -0.7071068, -1.0, 2.1073422e-08, 0.0, -0.99999994, 0.5802944, 0.08029437},
{-0.7071067, -0.7071068, 1.0, 2.1073424e-08, 0.0, 0.99999994, 0.0802944, 0.08029437},
{-8.742278e-08, -1.0, -1.0, 2.1073422e-08, 0.0, -0.99999994, 0.75, 0.010000005},
{-8.742278e-08, -1.0, 1.0, 2.1073424e-08, 0.0, 0.99999994, 0.24999999, 0.010000005},
{0.0, 1.0, -1.0, 2.1073422e-08, 0.0, -0.99999994, 0.75, 0.49},
{0.0, 1.0, 1.0, 2.1073424e-08, 0.0, 0.99999994, 0.25, 0.49},
{0.70710677, -0.70710677, -1.0, 2.1073422e-08, 0.0, -0.99999994, 0.9197056, 0.080294386},
{0.70710677, -0.70710677, 1.0, 2.1073424e-08, 0.0, 0.99999994, 0.41970563, 0.080294386},
{0.70710677, 0.70710677, -1.0, 2.1073422e-08, 0.0, -0.99999994, 0.9197056, 0.41970563},
{0.70710677, 0.70710677, 1.0, 2.1073424e-08, 0.0, 0.99999994, 0.41970563, 0.41970563},
{1.0, -4.371139e-08, -1.0, 2.1073422e-08, 0.0, -0.99999994, 0.99, 0.24999999},
{1.0, -4.371139e-08, 1.0, 2.1073424e-08, 0.0, 0.99999994, 0.49, 0.24999999}
};
const uint16_t indicesPinkMaterial[48]{17, 19, 26, 17, 26, 24, 25, 27, 31, 25, 31, 29, 28, 30, 23, 28, 23, 21, 20, 22, 15, 20, 15, 13, 12, 14, 11, 12, 11, 9, 8, 10, 2, 8, 2, 0, 1, 3, 6, 1, 6, 4, 5, 7, 18, 5, 18, 16};
const uint16_t indicesBlue[36]{47, 45, 41, 41, 35, 33, 33, 37, 39, 39, 43, 47, 47, 41, 33, 33, 39, 47, 34, 40, 44, 44, 46, 42, 42, 38, 36, 36, 32, 34, 34, 44, 42, 42, 36, 34};
Blob::Mesh Cylinder::get(Blob::Context &context) {
    Blob::VertexLayout vertexLayout;
    vertexLayout.begin();
    vertexLayout.add<float>(bgfx::Attrib::Position, 3);
    vertexLayout.add<float>(bgfx::Attrib::Normal, 3);
    vertexLayout.add<float>(bgfx::Attrib::TexCoord0, 2);
    vertexLayout.end();
    std::unique_ptr<Blob::VertexBuffer> &CylinderVertexBuffer = context.vertexBuffers["Cylinder"];
    if(!CylinderVertexBuffer)
        CylinderVertexBuffer = std::make_unique<Blob::VertexBuffer>(Blob::Buffer{data}, vertexLayout);
    std::unique_ptr<Blob::RenderOptions> &PinkMaterialRo = context.renderOptions["CylinderPinkMaterial"];
    if(!PinkMaterialRo)
        PinkMaterialRo = std::make_unique<Blob::RenderOptions>(Blob::Buffer{indicesPinkMaterial});
    std::unique_ptr<Blob::RenderOptions> &BlueRo = context.renderOptions["CylinderBlue"];
    if(!BlueRo)
        BlueRo = std::make_unique<Blob::RenderOptions>(Blob::Buffer{indicesBlue});
    return Blob::Mesh{{
        {
            Blob::Materials::pbrSingleColor(context, Blob::Color{0.8000000715255737, 0.10869184881448746, 0.22883038222789764, 1.0}),
            CylinderVertexBuffer.get(),
            PinkMaterialRo.get(),
        },
        {
            Blob::Materials::pbrSingleColor(context, Blob::Color{0.800000011920929, 0.800000011920929, 0.800000011920929, 1.0}),
            CylinderVertexBuffer.get(),
            BlueRo.get(),
        },
    }};
}
}
